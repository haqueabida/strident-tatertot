import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.junit.Test;

import burlap.behavior.singleagent.Policy;
import burlap.behavior.singleagent.planning.ActionTransitions;
import burlap.behavior.singleagent.planning.HashedTransitionProbability;
import burlap.behavior.singleagent.planning.PlannerDerivedPolicy;
import burlap.behavior.singleagent.planning.ValueFunctionPlanner;
import burlap.behavior.singleagent.planning.ValueFunctionPlanner.StaticVFPlanner;
import burlap.behavior.singleagent.planning.commonpolicies.GreedyDeterministicQPolicy;
import burlap.behavior.singleagent.planning.stochastic.policyiteration.PolicyIteration;
import burlap.behavior.statehashing.DiscreteStateHashFactory;
import burlap.behavior.statehashing.StateHashTuple;
import burlap.domain.singleagent.graphdefined.GraphDefinedDomain;
import burlap.oomdp.core.Domain;
import burlap.oomdp.core.State;
import burlap.oomdp.core.TerminalFunction;
import burlap.oomdp.singleagent.RewardFunction;

public class SpeedyPotentialTest {
    public class LongPolicyIterationGraderTestRunVersion {

        final double MAX_DELTA = 0.00001;

        // domain should be generated from your GraphDefinedDomain object
        protected int countPIIterations(Domain domain, int numStates, RewardFunction rf, TerminalFunction tf, double gamma) {
            double maxDelta = MAX_DELTA;
            MyPolicyIteration mpi = new MyPolicyIteration(domain, numStates, rf, tf, gamma, maxDelta);
            State initState = GraphDefinedDomain.getState(domain, 0);
            mpi.planFromState(initState);
       
            return mpi.getNumIterations();
        }
        
        class MyPolicyIteration extends ValueFunctionPlanner {

            protected double maxPIDelta;
            protected double maxEvalDelta;
            protected PlannerDerivedPolicy evaluativePolicy;
            protected boolean foundReachableStates = false;
            protected int numIterations = 0;

            int numStates;
            DiscreteStateHashFactory hashFactory;

            public MyPolicyIteration(Domain domain, int numStates, RewardFunction rf, TerminalFunction tf,
                                     double gamma, double maxDelta) {

                this.hashFactory = new DiscreteStateHashFactory();
                this.VFPInit(domain, rf, tf, gamma, this.hashFactory);
                this.maxPIDelta = maxDelta;
                this.maxEvalDelta = maxDelta;
                this.numStates = numStates;
                this.evaluativePolicy = new GreedyDeterministicQPolicy(this);
            }
            
            public void setPolicyClassToEvaluate(PlannerDerivedPolicy p){
                this.evaluativePolicy = p;
            }

            public Policy getComputedPolicy(){
                return (Policy)this.evaluativePolicy;
            }

            public void recomputeReachableStates(){
                this.foundReachableStates = false;
            }

            @Override
            public void planFromState(State initialState) {

                int iterations = 0;
                this.initializeOptionsForExpectationComputations();
                if(this.performReachabilityFrom(initialState)){

                    double delta;
                    do{
                        StaticVFPlanner lastValueFunction = this.getCopyOfValueFunction();
                        this.evaluativePolicy.setPlanner(lastValueFunction);
                        delta = this.evaluatePolicy();
                     //   seePolicy();
                        iterations++;
                        // DPrint.cl(this.debugCode, "Num iterations: " + iterations + "\nDelta: " + delta);
                    }while(delta > this.maxPIDelta);

                }

                this.numIterations = iterations;

            }


            @Override
            public void resetPlannerResults(){
                super.resetPlannerResults();
                this.foundReachableStates = false;
                this.numIterations = 0;
            }


            protected double evaluatePolicy(){

                if(!this.foundReachableStates){
                    throw new RuntimeException("Cannot run VI until the reachable states have been found."+
                            "Use planFromState method at least once or instead.");
                }


                double maxChangeInPolicyEvaluation = Double.NEGATIVE_INFINITY;

                double delta;
                do {
                    delta = 0;
                    for(int i = 0; i < this.numStates; i++){
                        StateHashTuple sh = this.hashFactory.hashState(GraphDefinedDomain.getState(domain, i));
                        double v = this.value(sh);
                        double maxQ = this.performFixedPolicyBellmanUpdateOn(sh,(Policy)this.evaluativePolicy);
                        delta = Math.max(Math.abs(maxQ - v), delta);
                    }

                    maxChangeInPolicyEvaluation = Math.max(delta, maxChangeInPolicyEvaluation);

                } while(delta >= this.maxEvalDelta);

                return maxChangeInPolicyEvaluation;
            }

            public boolean performReachabilityFrom(State si){



                StateHashTuple sih = this.stateHash(si);
                //if this is not a new state and we are not required to perform a new reachability analysis,
                //   then this method does not need to do anything.
                if(transitionDynamics.containsKey(sih) && this.foundReachableStates){
                    return false; //no need for additional reachability testing
                }

                //add to the open list
                LinkedList <StateHashTuple> openList = new LinkedList<StateHashTuple>();
                Set <StateHashTuple> openedSet = new HashSet<StateHashTuple>();
                openList.offer(sih);
                openedSet.add(sih);

                while(openList.size() > 0){
                    StateHashTuple sh = openList.poll();

                    //skip this if it's already been expanded
                    if(transitionDynamics.containsKey(sh)){
                        continue;
                    }

                    mapToStateIndex.put(sh, sh);

                    //do not need to expand from terminal states
                    if(this.tf.isTerminal(sh.s)){
                        continue;
                    }

                    //get the transition dynamics for each action and queue up new states
                    List <ActionTransitions> transitions = this.getActionsTransitions(sh);
                    for(ActionTransitions at : transitions){
                        for(HashedTransitionProbability tp : at.transitions){
                            StateHashTuple tsh = tp.sh;
                            if(!openedSet.contains(tsh) && !transitionDynamics.containsKey(tsh)){
                                openedSet.add(tsh);
                                openList.offer(tsh);
                            }
                        }

                    }

                }

                this.foundReachableStates = true;

                return true;

            }

            public int getNumIterations() {
                return this.numIterations;
            }

        }
    }

    @Test
    public void test1() {
        //The parameters for the constructor of the GreedyPotential object are:
        int numStates = 9;
        int numActions = 4;
        double[][][] probabilitiesOfTransitions = {
                {
                        {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.1, 0.8, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.9, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.1, 0.1, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.9, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0},
                        {0.0, 0.1, 0.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.8, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0},
                        {0.0, 0.1, 0.1, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.1, 0.0, 0.0, 0.0, 0.8, 0.0, 0.1, 0.0},
                        {0.0, 0.8, 0.0, 0.1, 0.0, 0.1, 0.0, 0.0, 0.0},
                        {0.0, 0.1, 0.0, 0.8, 0.0, 0.0, 0.0, 0.1, 0.0},
                        {0.0, 0.0, 0.0, 0.1, 0.0, 0.1, 0.0, 0.8, 0.0}
                },
                {
                        {0.0, 0.0, 0.1, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1},
                        {0.0, 0.0, 0.8, 0.0, 0.1, 0.1, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.1, 0.0, 0.8, 0.0, 0.0, 0.0, 0.1},
                        {0.0, 0.0, 0.0, 0.0, 0.1, 0.1, 0.0, 0.0, 0.8}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.9},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.1, 0.1},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.8, 0.1},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.9}
                }
        };

        double[][][] rewards = {
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1}
                },
                {
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1}
                },
                {
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1},
                        {-0.1, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, 1.0, -0.1}
                }
        };

        // The argument for the generateFromDiscountFactor function is:
        double gamma = 0.999;
        SpeedyPotential sp = new SpeedyPotential(numStates, numActions, probabilitiesOfTransitions, rewards);
        double[] output = sp.generateFromDiscountFactor(gamma);
        // Your code 's output for generateFromDiscountFactor is: {0.0,0.0,0.0}
        for(int i = 0; i < output.length; i++)
            System.out.print(output[i] + ", ");

        LongPolicyIterationGraderTestRunVersion counter = new LongPolicyIterationGraderTestRunVersion();
        int iterations = counter.countPIIterations(
                sp.getGraphDefinedDomain().generateDomain(),
                numStates,
                sp.getRF(gamma),
                sp.getTF(),
                gamma);
        System.out.println("\nIterations = " + iterations);
        // Your code threw an exception:
        // java.lang.ArrayIndexOutOfBoundsException:3
    }

    @Test
    public void test2() {
        // The parameters for the constructor of the GreedyPotential object are:
        int numStates = 15;
        int numActions = 4;
        double[][][] probabilitiesOfTransitions = {
                {
                        {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.9, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.1, 0.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.8, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.1, 0.1, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.1, 0.0, 0.0, 0.0, 0.8, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.8, 0.0, 0.0, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.1, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.1, 0.1, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.8, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.1, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.8, 0.0, 0.1, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.1, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.1, 0.0, 0.8, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}
                }
        };

        double[][][] rewards = {
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1},
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1},
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1},
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1},
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1},
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1},
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1},
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1},
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1},
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1},
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1},
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1},
                        {-1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -1.0, -0.1, -0.1, -0.1, -0.1, -1.0, -0.1, 1.0, -0.1}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                }
        };

        // The argument for the generateFromDiscountFactor function is:
        double gamma = 0.99;
        SpeedyPotential sp = new SpeedyPotential(numStates, numActions, probabilitiesOfTransitions, rewards);
        double[] output = sp.generateFromDiscountFactor(gamma);

        // Your code 's output for generateFromDiscountFactor is: {0.0,0.0,0.0}
        for(int i = 0; i < output.length; i++)
            System.out.print(output[i] + ", ");

        LongPolicyIterationGraderTestRunVersion counter = new LongPolicyIterationGraderTestRunVersion();
        int iterations = counter.countPIIterations(
                sp.getGraphDefinedDomain().generateDomain(),
                numStates,
                sp.getRF(gamma),
                sp.getTF(),
                gamma);
        System.out.println("\nIterations = " + iterations);
        // Your code threw an exception:
        // java.lang.ArrayIndexOutOfBoundsException:3
    }

    @Test
    public void test3() {
        // The parameters for the constructor of the GreedyPotential object are:
        int numStates = 12;
        int numActions = 4;
        double[][][] probabilitiesOfTransitions = {
                {
                        {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.1, 0.8, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.9, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.1, 0.1, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.9, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.1, 0.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.8, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.1, 0.1, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.0, 0.0},
                        {0.0, 0.8, 0.0, 0.0, 0.1, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.1, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.1, 0.0, 0.0, 0.8, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.0},
                        {0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.1, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.1, 0.0, 0.0, 0.8, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1, 0.8, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.1, 0.1, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.9, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9, 0.1, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.9, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.1, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.8, 0.1, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.9, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}}};

        double[][][] rewards = {
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1}
                },
                {
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1}
                },
                {
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                },
                {
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1}
                },
                {
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1},
                        {-0.1, -0.1, -0.1, -0.1, 1.0, -0.1, -0.1, -1.0, -0.1, -0.1, -0.1, -0.1}
                },
                {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                }
        };

        // The argument for the generateFromDiscountFactor function is:
        double gamma = 0.99;

        // Your code 's output for generateFromDiscountFactor is: {0.0,0.0,0.0}
        SpeedyPotential sp = new SpeedyPotential(numStates, numActions, probabilitiesOfTransitions, rewards);
        double[] output = sp.generateFromDiscountFactor(gamma);
        // Your code 's output for generateFromDiscountFactor is: {0.0,0.0,0.0}
        for(int i = 0; i < output.length; i++)
            System.out.print(output[i] + ", ");

        LongPolicyIterationGraderTestRunVersion counter = new LongPolicyIterationGraderTestRunVersion();
        int iterations = counter.countPIIterations(
                sp.getGraphDefinedDomain().generateDomain(),
                numStates,
                sp.getRF(gamma),
                sp.getTF(),
                gamma);
        System.out.println("\nIterations = " + iterations);
        // Your code threw an exception:
        // java.lang.ArrayIndexOutOfBoundsException:3
    }
}